<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="28" total="56" passed="25">
  <reporter-output>
  </reporter-output>
  <suite name="author_tests_in_groups" duration-ms="859" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:21 EEST">
    <groups>
      <group name="authorGroup">
        <method signature="AuthorTest.verifyCreatingAuthorPostRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyCreatingAuthorPostRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyDeletingAuthorByIdDeleteRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyDeletingAuthorByIdDeleteRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyUpdatingAuthorPutRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyUpdatingAuthorPutRequest" class="AuthorTest"/>
      </group> <!-- authorGroup -->
      <group name="withoutPreconditionGroup">
        <method signature="AuthorTest.verifyGetAllAuthorsGetRequest()[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAllAuthorsGetRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyGetAuthorByBookIdGetRequest(pojo.Book)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorByBookIdGetRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyGetAuthorByIdGetRequest(pojo.Author)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorByIdGetRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorsByGenreIdGetRequest" class="AuthorTest"/>
        <method signature="AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetNotFoundAuthorByIdGetRequestNegativeCase" class="AuthorTest"/>
        <method signature="AuthorTest.verifySearchAuthorsGetRequest()[pri:0, instance:AuthorTest@3f4f5330]" name="verifySearchAuthorsGetRequest" class="AuthorTest"/>
      </group> <!-- withoutPreconditionGroup -->
    </groups>
    <test name="author_tests" duration-ms="461" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:21 EEST">
      <class name="AuthorTest">
        <test-method status="PASS" signature="beforeGroupAuthor()[pri:0, instance:AuthorTest@e042c99]" name="beforeGroupAuthor" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroupAuthor -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatingAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethodAuthor" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatingAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodAuthor -->
        <test-method status="PASS" signature="verifyCreatingAuthorPostRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyCreatingAuthorPostRequest" duration-ms="65" started-at="2021-08-18T17:04:20 EEST" description="Verifying creating new Author object with POST method" data-provider="dpNewAuthor" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatingAuthorPostRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatingAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethodAuthor" is-config="true" duration-ms="56" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatingAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodAuthor -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeletingAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethodAuthor" is-config="true" duration-ms="33" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeletingAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodAuthor -->
        <test-method status="PASS" signature="verifyDeletingAuthorByIdDeleteRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyDeletingAuthorByIdDeleteRequest" duration-ms="102" started-at="2021-08-18T17:04:20 EEST" description="Verifying deleting 1 Author object by id with DELETE method" data-provider="dpNewAuthor" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeletingAuthorByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeletingAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethodAuthor" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeletingAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodAuthor -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatingAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="beforeMethodAuthor" is-config="true" duration-ms="53" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatingAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodAuthor -->
        <test-method status="PASS" signature="verifyUpdatingAuthorPutRequest(pojo.Author)[pri:0, instance:AuthorTest@e042c99]" name="verifyUpdatingAuthorPutRequest" duration-ms="66" started-at="2021-08-18T17:04:20 EEST" description="Verifying updating Author object with PUT method" data-provider="dpNewAuthor" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author description", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatingAuthorPutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatingAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodAuthor(java.lang.reflect.Method)[pri:0, instance:AuthorTest@e042c99]" name="afterMethodAuthor" is-config="true" duration-ms="50" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatingAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodAuthor -->
        <test-method status="PASS" signature="afterGroupAuthor()[pri:0, instance:AuthorTest@e042c99]" name="afterGroupAuthor" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterGroupAuthor -->
      </class> <!-- AuthorTest -->
    </test> <!-- author_tests -->
    <test name="author_tests_without_precondition" duration-ms="391" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
      <class name="AuthorTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAllAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllAuthorsGetRequest()[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAllAuthorsGetRequest" duration-ms="73" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting all Author objects with GET method" finished-at="2021-08-18T17:04:21 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllAuthorsGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAllAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorByBookIdGetRequest(pojo.Book)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorByBookIdGetRequest" duration-ms="56" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting 1 Author object by Book id with GET method" data-provider="dpTestBook" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorByBookIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorByIdGetRequest(pojo.Author)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorByIdGetRequest" duration-ms="58" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting 1 Author object by id with GET method" data-provider="dpTestAuthor" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetAuthorsByGenreIdGetRequest" duration-ms="64" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting 1 Author object by Book id with GET method" data-provider="dpTestGenre" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Impedit velit distinctio fuga. Asperiores enim impedit et et. Aut cum eum.", "genreId":7448, "genreName":"Folklore"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorsByGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)[pri:0, instance:AuthorTest@3f4f5330]" name="verifyGetNotFoundAuthorByIdGetRequestNegativeCase" duration-ms="49" started-at="2021-08-18T17:04:21 EEST" description="Negative case when element not found - verifying getting 1 Author object by id with GET method" data-provider="dpNewAuthor" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundAuthorByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifySearchAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchAuthorsGetRequest()[pri:0, instance:AuthorTest@3f4f5330]" name="verifySearchAuthorsGetRequest" duration-ms="34" started-at="2021-08-18T17:04:21 EEST" description="Verifying searching books by its name" finished-at="2021-08-18T17:04:21 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:25)
at AuthorTest.verifySearchAuthorsGetRequest(AuthorTest.java:101)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1207)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchAuthorsGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@3f4f5330]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifySearchAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- AuthorTest -->
    </test> <!-- author_tests_without_precondition -->
  </suite> <!-- author_tests_in_groups -->
  <suite name="suite of suites" duration-ms="0" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
    <groups>
    </groups>
  </suite> <!-- suite of suites -->
  <suite name="book_tests_in_groups" duration-ms="5457" started-at="2021-08-18T17:04:15 EEST" finished-at="2021-08-18T17:04:20 EEST">
    <groups>
      <group name="bookGroup">
        <method signature="BookTest.verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)[pri:0, instance:BookTest@282ffbf5]" name="verifyCreatingBookPostRequest" class="BookTest"/>
        <method signature="BookTest.verifyDeletingBookByIdDeleteRequest(pojo.Book)[pri:0, instance:BookTest@282ffbf5]" name="verifyDeletingBookByIdDeleteRequest" class="BookTest"/>
        <method signature="BookTest.verifyUpdatingBookPutRequest(pojo.Book)[pri:0, instance:BookTest@282ffbf5]" name="verifyUpdatingBookPutRequest" class="BookTest"/>
      </group> <!-- bookGroup -->
      <group name="withoutPreconditionGroup">
        <method signature="BookTest.verifyGetAllBooksGetRequest()[pri:0, instance:BookTest@6a937336]" name="verifyGetAllBooksGetRequest" class="BookTest"/>
        <method signature="BookTest.verifyGetBookByIdGetRequest(pojo.Book)[pri:0, instance:BookTest@6a937336]" name="verifyGetBookByIdGetRequest" class="BookTest"/>
        <method signature="BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest(pojo.Author,pojo.Genre)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByAuthorIdGenreIdGetRequest" class="BookTest"/>
        <method signature="BookTest.verifyGetBooksByAuthorIdGetRequest(pojo.Author)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByAuthorIdGetRequest" class="BookTest"/>
        <method signature="BookTest.verifyGetBooksByGenreIdGetRequest(pojo.Genre)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByGenreIdGetRequest" class="BookTest"/>
        <method signature="BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)[pri:0, instance:BookTest@6a937336]" name="verifyGetNotFoundBookByIdGetRequestNegativeCase" class="BookTest"/>
        <method signature="BookTest.verifySearchBooksGetRequest()[pri:0, instance:BookTest@6a937336]" name="verifySearchBooksGetRequest" class="BookTest"/>
      </group> <!-- withoutPreconditionGroup -->
    </groups>
    <test name="book_tests" duration-ms="4630" started-at="2021-08-18T17:04:15 EEST" finished-at="2021-08-18T17:04:19 EEST">
      <class name="BookTest">
        <test-method status="PASS" signature="beforeGroupBook()[pri:0, instance:BookTest@282ffbf5]" name="beforeGroupBook" is-config="true" duration-ms="5" started-at="2021-08-18T17:04:15 EEST" finished-at="2021-08-18T17:04:15 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroupBook -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethod" is-config="true" duration-ms="12" started-at="2021-08-18T17:04:15 EEST" finished-at="2021-08-18T17:04:15 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethodBook" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:15 EEST" finished-at="2021-08-18T17:04:15 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodBook -->
        <test-method status="PASS" signature="verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)[pri:0, instance:BookTest@282ffbf5]" name="verifyCreatingBookPostRequest" duration-ms="3786" started-at="2021-08-18T17:04:15 EEST" description="Verifying creating new Book object by Author id and Genre idwith POST method" data-provider="combinedDPNewBookOldAuthorOldGenre" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"genreDescription":"Impedit velit distinctio fuga. Asperiores enim impedit et et. Aut cum eum.", "genreId":7448, "genreName":"Folklore"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatingBookPostRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethod" is-config="true" duration-ms="2" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethodBook" is-config="true" duration-ms="92" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyCreatingBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodBook -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeletingBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethodBook" is-config="true" duration-ms="52" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeletingBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodBook -->
        <test-method status="PASS" signature="verifyDeletingBookByIdDeleteRequest(pojo.Book)[pri:0, instance:BookTest@282ffbf5]" name="verifyDeletingBookByIdDeleteRequest" duration-ms="125" started-at="2021-08-18T17:04:19 EEST" description="Verifying deleting 1 Book object by id with DELETE method" data-provider="dpNewBook" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeletingBookByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeletingBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethodBook" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeletingBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodBook -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatingBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="beforeMethodBook" is-config="true" duration-ms="58" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatingBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodBook -->
        <test-method status="PASS" signature="verifyUpdatingBookPutRequest(pojo.Book)[pri:0, instance:BookTest@282ffbf5]" name="verifyUpdatingBookPutRequest" duration-ms="85" started-at="2021-08-18T17:04:19 EEST" description="Verifying updating Book object with PUT method" data-provider="dpNewBook" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"updated book description", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatingBookPutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatingBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodBook(java.lang.reflect.Method)[pri:0, instance:BookTest@282ffbf5]" name="afterMethodBook" is-config="true" duration-ms="56" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatingBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodBook -->
        <test-method status="PASS" signature="afterGroupBook()[pri:0, instance:BookTest@282ffbf5]" name="afterGroupBook" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterGroupBook -->
      </class> <!-- BookTest -->
    </test> <!-- book_tests -->
    <test name="book_tests_without_precondition" duration-ms="803" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:20 EEST">
      <class name="BookTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetAllBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllBooksGetRequest()[pri:0, instance:BookTest@6a937336]" name="verifyGetAllBooksGetRequest" duration-ms="160" started-at="2021-08-18T17:04:19 EEST" description="Verifying getting all Book objects with GET method" finished-at="2021-08-18T17:04:19 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllBooksGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetAllBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:19 EEST" finished-at="2021-08-18T17:04:19 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBookByIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBookByIdGetRequest(pojo.Book)[pri:0, instance:BookTest@6a937336]" name="verifyGetBookByIdGetRequest" duration-ms="154" started-at="2021-08-18T17:04:19 EEST" description="Verifying getting 1 Book object by id with GET method" data-provider="dpTestBook" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBookByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBookByIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest(pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBooksByAuthorIdGenreIdGetRequest(pojo.Author,pojo.Genre)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByAuthorIdGenreIdGetRequest" duration-ms="96" started-at="2021-08-18T17:04:20 EEST" description="Verifying getting List of Books object by Author id and Genre id with GET method" data-provider="combinedDPOldAuthorOldGenre" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{"genreDescription":"Impedit velit distinctio fuga. Asperiores enim impedit et et. Aut cum eum.", "genreId":7448, "genreName":"Folklore"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByAuthorIdGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest(pojo.Author,pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBooksByAuthorIdGetRequest(pojo.Author)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByAuthorIdGetRequest" duration-ms="110" started-at="2021-08-18T17:04:20 EEST" description="Verifying getting List of Books object by Author id with GET method" data-provider="dpTestAuthor" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByAuthorIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBooksByGenreIdGetRequest(pojo.Genre)[pri:0, instance:BookTest@6a937336]" name="verifyGetBooksByGenreIdGetRequest" duration-ms="113" started-at="2021-08-18T17:04:20 EEST" description="Verifying getting List of Books object by Genre id with GET method" data-provider="dpTestGenre" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Impedit velit distinctio fuga. Asperiores enim impedit et et. Aut cum eum.", "genreId":7448, "genreName":"Folklore"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)[pri:0, instance:BookTest@6a937336]" name="verifyGetNotFoundBookByIdGetRequestNegativeCase" duration-ms="61" started-at="2021-08-18T17:04:20 EEST" description="Negative case when element not found - verifying getting 1 Book object by id with GET method" data-provider="dpNewBook" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundBookByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifySearchBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchBooksGetRequest()[pri:0, instance:BookTest@6a937336]" name="verifySearchBooksGetRequest" duration-ms="26" started-at="2021-08-18T17:04:20 EEST" description="Verifying searching books by its name" finished-at="2021-08-18T17:04:20 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:25)
at BookTest.verifySearchBooksGetRequest(BookTest.java:116)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1207)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchBooksGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@6a937336]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:20 EEST" finished-at="2021-08-18T17:04:20 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifySearchBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- BookTest -->
    </test> <!-- book_tests_without_precondition -->
  </suite> <!-- book_tests_in_groups -->
  <suite name="genre_tests_in_groups" duration-ms="670" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:22 EEST">
    <groups>
      <group name="genreGroup">
        <method signature="GenreTest.verifyCreatingGenrePostRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyCreatingGenrePostRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyDeletingGenreByIdDeleteRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyDeletingGenreByIdDeleteRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyUpdatingGenrePutRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyUpdatingGenrePutRequest" class="GenreTest"/>
      </group> <!-- genreGroup -->
      <group name="withoutPreconditionGroup">
        <method signature="GenreTest.verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetAllGenresByAuthorIdGetRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyGetAllGenresGetRequest()[pri:0, instance:GenreTest@3d37203b]" name="verifyGetAllGenresGetRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyGetGenreByBookIdGetRequest(pojo.Book)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetGenreByBookIdGetRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyGetGenreByIdGetRequest(pojo.Genre)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetGenreByIdGetRequest" class="GenreTest"/>
        <method signature="GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetNotFoundGenreByIdGetRequestNegativeCase" class="GenreTest"/>
        <method signature="GenreTest.verifySearchGenresGetRequest()[pri:0, instance:GenreTest@3d37203b]" name="verifySearchGenresGetRequest" class="GenreTest"/>
      </group> <!-- withoutPreconditionGroup -->
    </groups>
    <test name="genre_tests" duration-ms="361" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
      <class name="GenreTest">
        <test-method status="PASS" signature="beforeGroupGenre()[pri:0, instance:GenreTest@7c8d5312]" name="beforeGroupGenre" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroupGenre -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatingGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethodGenre" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatingGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodGenre -->
        <test-method status="PASS" signature="verifyCreatingGenrePostRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyCreatingGenrePostRequest" duration-ms="59" started-at="2021-08-18T17:04:21 EEST" description="Verifying creating new Genre object with POST method" data-provider="dpNewGenre" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatingGenrePostRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatingGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethodGenre" is-config="true" duration-ms="31" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatingGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodGenre -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeletingGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethodGenre" is-config="true" duration-ms="46" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeletingGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodGenre -->
        <test-method status="PASS" signature="verifyDeletingGenreByIdDeleteRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyDeletingGenreByIdDeleteRequest" duration-ms="71" started-at="2021-08-18T17:04:21 EEST" description="Verifying deleting 1 Genre object by id with DELETE method" data-provider="dpNewGenre" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeletingGenreByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeletingGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethodGenre" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeletingGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodGenre -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatingGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="beforeMethodGenre" is-config="true" duration-ms="46" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatingGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodGenre -->
        <test-method status="PASS" signature="verifyUpdatingGenrePutRequest(pojo.Genre)[pri:0, instance:GenreTest@7c8d5312]" name="verifyUpdatingGenrePutRequest" duration-ms="42" started-at="2021-08-18T17:04:21 EEST" description="Verifying updating Genre object with PUT method" data-provider="dpNewGenre" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"updated genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatingGenrePutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatingGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethodGenre(java.lang.reflect.Method)[pri:0, instance:GenreTest@7c8d5312]" name="afterMethodGenre" is-config="true" duration-ms="33" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatingGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodGenre -->
        <test-method status="PASS" signature="afterGroupGenre()[pri:0, instance:GenreTest@7c8d5312]" name="afterGroupGenre" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterGroupGenre -->
      </class> <!-- GenreTest -->
    </test> <!-- genre_tests -->
    <test name="genre_tests_without_precondition" duration-ms="301" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:22 EEST">
      <class name="GenreTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetAllGenresByAuthorIdGetRequest" duration-ms="59" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting all Genre objects by AuthorId with GET method" data-provider="dpTestAuthor" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllGenresByAuthorIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllGenresGetRequest()[pri:0, instance:GenreTest@3d37203b]" name="verifyGetAllGenresGetRequest" duration-ms="51" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting all Genre objects with GET method" finished-at="2021-08-18T17:04:21 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllGenresGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:21 EEST" finished-at="2021-08-18T17:04:21 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetGenreByBookIdGetRequest(pojo.Book)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetGenreByBookIdGetRequest" duration-ms="69" started-at="2021-08-18T17:04:21 EEST" description="Verifying getting all Genre objects by BookId with GET method" data-provider="dpTestBook" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetGenreByBookIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetGenreByIdGetRequest(pojo.Genre)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetGenreByIdGetRequest" duration-ms="26" started-at="2021-08-18T17:04:22 EEST" description="Verifying getting 1 Genre object by id with GET method" data-provider="dpTestGenre" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Impedit velit distinctio fuga. Asperiores enim impedit et et. Aut cum eum.", "genreId":7448, "genreName":"Folklore"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetGenreByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)[pri:0, instance:GenreTest@3d37203b]" name="verifyGetNotFoundGenreByIdGetRequestNegativeCase" duration-ms="33" started-at="2021-08-18T17:04:22 EEST" description="Negative case when element not found - verifying getting 1 Genre object by id with GET method" data-provider="dpNewGenre" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundGenreByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifySearchGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchGenresGetRequest()[pri:0, instance:GenreTest@3d37203b]" name="verifySearchGenresGetRequest" duration-ms="16" started-at="2021-08-18T17:04:22 EEST" description="Verifying searching Genres by its name" finished-at="2021-08-18T17:04:22 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:25)
at GenreTest.verifySearchGenresGetRequest(GenreTest.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1207)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchGenresGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@3d37203b]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-18T17:04:22 EEST" finished-at="2021-08-18T17:04:22 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifySearchGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- GenreTest -->
    </test> <!-- genre_tests_without_precondition -->
  </suite> <!-- genre_tests_in_groups -->
</testng-results>
