<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="12" ignored="0" total="28" passed="16">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="7101" started-at="2021-08-16T20:34:27 EEST" finished-at="2021-08-16T20:34:34 EEST">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="7101" started-at="2021-08-16T20:34:27 EEST" finished-at="2021-08-16T20:34:34 EEST">
      <class name="AuthorTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="18" started-at="2021-08-16T20:34:27 EEST" finished-at="2021-08-16T20:34:27 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatedAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyCreatedAuthorPostRequest(pojo.Author)[pri:0, instance:AuthorTest@7906578e]" name="verifyCreatedAuthorPostRequest" duration-ms="3754" started-at="2021-08-16T20:34:27 EEST" description="Verifying creating new Author object with POST method" data-provider="dpNewAuthor" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatedAuthorPostRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="2" started-at="2021-08-16T20:34:31 EEST" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyCreatedAuthorPostRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:31 EEST" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeleteAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyDeleteAuthorByIdDeleteRequest(pojo.Author)[pri:0, instance:AuthorTest@7906578e]" name="verifyDeleteAuthorByIdDeleteRequest" duration-ms="247" started-at="2021-08-16T20:34:31 EEST" description="Verifying deleting 1 Author object by id with DELETE method" data-provider="dpNewAuthor" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Author), not marked as ignorable (5 known properties: "authorDescription", "nationality", "authorId", "birth", "authorName"])
 at [Source: (String)"{"timeStamp":"20:34:31.816 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Author with 'authorId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Author["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Author), not marked as ignorable (5 known properties: "authorDescription", "nationality", "authorId", "birth", "authorName"])
 at [Source: (String)"{"timeStamp":"20:34:31.816 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Author with 'authorId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Author["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.AuthorService.getActualObjAuthor(AuthorService.java:99)
at AuthorTest.verifyDeleteAuthorByIdDeleteRequest(AuthorTest.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteAuthorByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:31 EEST" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyDeleteAuthorByIdDeleteRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:31 EEST" finished-at="2021-08-16T20:34:31 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAllAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllAuthorsGetRequest()[pri:0, instance:AuthorTest@7906578e]" name="verifyGetAllAuthorsGetRequest" duration-ms="140" started-at="2021-08-16T20:34:31 EEST" description="Verifying getting all Author objects with GET method" finished-at="2021-08-16T20:34:32 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllAuthorsGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAllAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorByBookIdGetRequest(pojo.Book)[pri:0, instance:AuthorTest@7906578e]" name="verifyGetAuthorByBookIdGetRequest" duration-ms="92" started-at="2021-08-16T20:34:32 EEST" description="Verifying getting 1 Author object by Book id with GET method" data-provider="dpTestBook" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorByBookIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="5" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorByIdGetRequest(pojo.Author)[pri:0, instance:AuthorTest@7906578e]" name="verifyGetAuthorByIdGetRequest" duration-ms="74" started-at="2021-08-16T20:34:32 EEST" description="Verifying getting 1 Author object by id with GET method" data-provider="dpTestAuthor" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorByIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)[pri:0, instance:AuthorTest@7906578e]" name="verifyGetAuthorsByGenreIdGetRequest" duration-ms="97" started-at="2021-08-16T20:34:32 EEST" description="Verifying getting 1 Author object by Book id with GET method" data-provider="dpTestGenre" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Id voluptatibus qui ullam omnis laboriosam maxime laudantium. Vel aut dolorem dolorem facilis officiis. Voluptate impedit repellendus iure enim. Modi in sed alias eum. Eaque sunt nihil rerum.", "genreId":644, "genreName":"Metafiction"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAuthorsByGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetAuthorsByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)[pri:0, instance:AuthorTest@7906578e]" name="verifyGetNotFoundAuthorByIdGetRequestNegativeCase" duration-ms="74" started-at="2021-08-16T20:34:32 EEST" description="Negative case when element not found - verifying getting 1 Author object by id with GET method" data-provider="dpNewAuthor" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author descr", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Author), not marked as ignorable (5 known properties: "authorDescription", "nationality", "authorId", "birth", "authorName"])
 at [Source: (String)"{"timeStamp":"20:34:32.413 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Author with 'authorId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Author["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Author), not marked as ignorable (5 known properties: "authorDescription", "nationality", "authorId", "birth", "authorName"])
 at [Source: (String)"{"timeStamp":"20:34:32.413 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Author with 'authorId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Author["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.AuthorService.getActualObjAuthor(AuthorService.java:99)
at AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(AuthorTest.java:73)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundAuthorByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="2" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyGetNotFoundAuthorByIdGetRequestNegativeCase(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifySearchAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchAuthorsGetRequest()[pri:0, instance:AuthorTest@7906578e]" name="verifySearchAuthorsGetRequest" duration-ms="30" started-at="2021-08-16T20:34:32 EEST" description="Verifying searching books by its name" finished-at="2021-08-16T20:34:32 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:18)
at AuthorTest.verifySearchAuthorsGetRequest(AuthorTest.java:95)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchAuthorsGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifySearchAuthorsGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatedAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyUpdatedAuthorPutRequest(pojo.Author)[pri:0, instance:AuthorTest@7906578e]" name="verifyUpdatedAuthorPutRequest" duration-ms="217" started-at="2021-08-16T20:34:32 EEST" description="Verifying updating Author object with PUT method" data-provider="dpNewAuthor" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"updated author description", "authorId":9999, "authorName":{"first":"firstName", "second":"secondName"}, "birth":{"city":"Mykolaiv", "country":"Ukraine", "date":"1990-11-17"}, "nationality":"ukrainian"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatedAuthorPutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:AuthorTest@7906578e]" name="afterMethod" is-config="true" duration-ms="5" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void AuthorTest.verifyUpdatedAuthorPutRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- AuthorTest -->
      <class name="GenreTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatedGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyCreatedGenrePostRequest(pojo.Genre)[pri:0, instance:GenreTest@79d9214d]" name="verifyCreatedGenrePostRequest" duration-ms="103" started-at="2021-08-16T20:34:33 EEST" description="Verifying creating new Genre object with POST method" data-provider="dpNewGenre" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatedGenrePostRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyCreatedGenrePostRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeleteGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyDeleteGenreByIdDeleteRequest(pojo.Genre)[pri:0, instance:GenreTest@79d9214d]" name="verifyDeleteGenreByIdDeleteRequest" duration-ms="145" started-at="2021-08-16T20:34:34 EEST" description="Verifying deleting 1 Genre object by id with DELETE method" data-provider="dpNewGenre" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Genre), not marked as ignorable (3 known properties: "genreDescription", "genreId", "genreName"])
 at [Source: (String)"{"timeStamp":"20:34:34.150 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Genre with 'genreId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Genre["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Genre), not marked as ignorable (3 known properties: "genreDescription", "genreId", "genreName"])
 at [Source: (String)"{"timeStamp":"20:34:34.150 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Genre with 'genreId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Genre["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.GenreService.getActualObjGenre(GenreService.java:71)
at GenreTest.verifyDeleteGenreByIdDeleteRequest(GenreTest.java:65)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteGenreByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyDeleteGenreByIdDeleteRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)[pri:0, instance:GenreTest@79d9214d]" name="verifyGetAllGenresByAuthorIdGetRequest" duration-ms="58" started-at="2021-08-16T20:34:34 EEST" description="Verifying getting all Genre objects by AuthorId with GET method" data-provider="dpTestAuthor" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllGenresByAuthorIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllGenresGetRequest()[pri:0, instance:GenreTest@79d9214d]" name="verifyGetAllGenresGetRequest" duration-ms="54" started-at="2021-08-16T20:34:34 EEST" description="Verifying getting all Genre objects with GET method" finished-at="2021-08-16T20:34:34 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllGenresGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetAllGenresGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetGenreByIdGetRequest(pojo.Genre)[pri:0, instance:GenreTest@79d9214d]" name="verifyGetGenreByIdGetRequest" duration-ms="33" started-at="2021-08-16T20:34:34 EEST" description="Verifying getting 1 Genre object by id with GET method" data-provider="dpTestGenre" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Id voluptatibus qui ullam omnis laboriosam maxime laudantium. Vel aut dolorem dolorem facilis officiis. Voluptate impedit repellendus iure enim. Modi in sed alias eum. Eaque sunt nihil rerum.", "genreId":644, "genreName":"Metafiction"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetGenreByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenreByIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenresByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyGetGenresByBookIdGetRequest(pojo.Book)[pri:0, instance:GenreTest@79d9214d]" name="verifyGetGenresByBookIdGetRequest" duration-ms="23" started-at="2021-08-16T20:34:34 EEST" description="Verifying getting all Genre objects by BookId with GET method" data-provider="dpTestBook" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [405]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [405]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:18)
at GenreTest.verifyGetGenresByBookIdGetRequest(GenreTest.java:91)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetGenresByBookIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetGenresByBookIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)[pri:0, instance:GenreTest@79d9214d]" name="verifyGetNotFoundGenreByIdGetRequestNegativeCase" duration-ms="38" started-at="2021-08-16T20:34:34 EEST" description="Negative case when element not found - verifying getting 1 Genre object by id with GET method" data-provider="dpNewGenre" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Genre), not marked as ignorable (3 known properties: "genreDescription", "genreId", "genreName"])
 at [Source: (String)"{"timeStamp":"20:34:34.397 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Genre with 'genreId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Genre["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Genre), not marked as ignorable (3 known properties: "genreDescription", "genreId", "genreName"])
 at [Source: (String)"{"timeStamp":"20:34:34.397 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Genre with 'genreId' = '9999' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Genre["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.GenreService.getActualObjGenre(GenreService.java:71)
at GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(GenreTest.java:74)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundGenreByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyGetNotFoundGenreByIdGetRequestNegativeCase(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifySearchGenressGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchGenressGetRequest()[pri:0, instance:GenreTest@79d9214d]" name="verifySearchGenressGetRequest" duration-ms="20" started-at="2021-08-16T20:34:34 EEST" description="Verifying searching Genres by its name" finished-at="2021-08-16T20:34:34 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:18)
at GenreTest.verifySearchGenressGetRequest(GenreTest.java:100)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchGenressGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifySearchGenressGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatedGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyUpdatedGenrePutRequest(pojo.Genre)[pri:0, instance:GenreTest@79d9214d]" name="verifyUpdatedGenrePutRequest" duration-ms="154" started-at="2021-08-16T20:34:34 EEST" description="Verifying updating Genre object with PUT method" data-provider="dpNewGenre" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"updated genre description", "genreId":9999, "genreName":"genre name"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatedGenrePutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:GenreTest@79d9214d]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:34 EEST" finished-at="2021-08-16T20:34:34 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void GenreTest.verifyUpdatedGenrePutRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- GenreTest -->
      <class name="BookTest">
        <test-method status="FAIL" signature="verifyCreatedBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)[pri:0, instance:BookTest@3f4cd155]" name="verifyCreatedBookPostRequest" duration-ms="2" started-at="2021-08-16T20:34:32 EEST" description="Verifying creating new Book object by Author id and Genre idwith POST method" data-provider="dpNewBook" finished-at="2021-08-16T20:34:32 EEST">
          <exception class="org.testng.internal.reflect.MethodMatcherException">
            <message>
              <![CDATA[
[public void BookTest.verifyCreatedBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: verifyCreatedBookPostRequest([Parameter{index=0, type=pojo.Book, declaredAnnotations=[]}, Parameter{index=1, type=pojo.Author, declaredAnnotations=[]}, Parameter{index=2, type=pojo.Genre, declaredAnnotations=[]}])
Arguments: [(pojo.Book) {"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void BookTest.verifyCreatedBookPostRequest(pojo.Book,pojo.Author,pojo.Genre)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: verifyCreatedBookPostRequest([Parameter{index=0, type=pojo.Book, declaredAnnotations=[]}, Parameter{index=1, type=pojo.Author, declaredAnnotations=[]}, Parameter{index=2, type=pojo.Genre, declaredAnnotations=[]}])
Arguments: [(pojo.Book) {"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]
at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:43)
at org.testng.internal.Parameters.injectParameters(Parameters.java:914)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:34)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.reflect.MethodMatcherException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatedBookPostRequest -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:32 EEST" finished-at="2021-08-16T20:34:32 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeleteBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyDeleteBookByIdDeleteRequest(pojo.Book)[pri:0, instance:BookTest@3f4cd155]" name="verifyDeleteBookByIdDeleteRequest" duration-ms="262" started-at="2021-08-16T20:34:32 EEST" description="Verifying deleting 1 Book object by id with DELETE method" data-provider="dpNewBook" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Book), not marked as ignorable (6 known properties: "bookLanguage", "bookDescription", "bookId", "additional", "publicationYear", "bookName"])
 at [Source: (String)"{"timeStamp":"20:34:32.983 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Book with 'bookId' = '536' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Book["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Book), not marked as ignorable (6 known properties: "bookLanguage", "bookDescription", "bookId", "additional", "publicationYear", "bookName"])
 at [Source: (String)"{"timeStamp":"20:34:32.983 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Book with 'bookId' = '536' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Book["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.BookService.getActualObjBook(BookService.java:72)
at BookTest.verifyDeleteBookByIdDeleteRequest(BookTest.java:69)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteBookByIdDeleteRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyDeleteBookByIdDeleteRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetAllBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetAllBooksGetRequest()[pri:0, instance:BookTest@3f4cd155]" name="verifyGetAllBooksGetRequest" duration-ms="121" started-at="2021-08-16T20:34:33 EEST" description="Verifying getting all Book objects with GET method" finished-at="2021-08-16T20:34:33 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllBooksGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetAllBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBookByIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBookByIdGetRequest(pojo.Book)[pri:0, instance:BookTest@3f4cd155]" name="verifyGetBookByIdGetRequest" duration-ms="72" started-at="2021-08-16T20:34:33 EEST" description="Verifying getting 1 Book object by id with GET method" data-provider="dpTestBook" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":292, "bookName":"Ipsa dolor laboriosam", "bookLanguage":"croatian", "bookDescription":"Sit aut architecto ab voluptatem. Rerum itaque voluptatem corrupti vero laboriosam. Officiis esse dolor. Qui sunt quasi laudantium.", "publicationYear":2008, "additional":{"pageCount":682, "size":{"height":16.1, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBookByIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBookByIdGetRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyGetBooksByAuthorIdGenreIdGetRequest()[pri:0, instance:BookTest@3f4cd155]" name="verifyGetBooksByAuthorIdGenreIdGetRequest" duration-ms="99" started-at="2021-08-16T20:34:33 EEST" description="Verifying getting List of Books object by Author id and Genre id with GET method" finished-at="2021-08-16T20:34:33 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[List of books is empty expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: List of books is empty expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest(BookTest.java:105)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByAuthorIdGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGenreIdGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBooksByAuthorIdGetRequest(pojo.Author)[pri:0, instance:BookTest@3f4cd155]" name="verifyGetBooksByAuthorIdGetRequest" duration-ms="106" started-at="2021-08-16T20:34:33 EEST" description="Verifying getting List of Books object by Author id with GET method" data-provider="dpTestAuthor" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"authorDescription":"Neque natus sequi. Sunt molestiae quia numquam qui qui quasi ipsa. Vel ea iusto assumenda voluptatem eos qui. Qui excepturi dolor vitae ea et repudiandae. Voluptas mollitia vero autem minima unde commodi sint.", "authorId":37, "authorName":{"first":"Alexandro", "second":"Kris"}, "birth":{"city":"Doylechester", "country":"Venezuela", "date":"1930-09-19"}, "nationality":"Turkish"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByAuthorIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByAuthorIdGetRequest(pojo.Author)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyGetBooksByGenreIdGetRequest(pojo.Genre)[pri:0, instance:BookTest@3f4cd155]" name="verifyGetBooksByGenreIdGetRequest" duration-ms="132" started-at="2021-08-16T20:34:33 EEST" description="Verifying getting List of Books object by Genre id with GET method" data-provider="dpTestGenre" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"genreDescription":"Id voluptatibus qui ullam omnis laboriosam maxime laudantium. Vel aut dolorem dolorem facilis officiis. Voluptate impedit repellendus iure enim. Modi in sed alias eum. Eaque sunt nihil rerum.", "genreId":644, "genreName":"Metafiction"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetBooksByGenreIdGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetBooksByGenreIdGetRequest(pojo.Genre)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)[pri:0, instance:BookTest@3f4cd155]" name="verifyGetNotFoundBookByIdGetRequestNegativeCase" duration-ms="72" started-at="2021-08-16T20:34:33 EEST" description="Negative case when element not found - verifying getting 1 Book object by id with GET method" data-provider="dpNewBook" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"Qui quisquam omnis dolores voluptates ut. Ad officia suscipit nihil et vero. Ut veniam esse aliquam eum ea. Est nesciunt est id iure fuga.", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <exception class="com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException">
            <message>
              <![CDATA[Unrecognized field "timeStamp" (class pojo.Book), not marked as ignorable (6 known properties: "bookLanguage", "bookDescription", "bookId", "additional", "publicationYear", "bookName"])
 at [Source: (String)"{"timeStamp":"20:34:33.647 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Book with 'bookId' = '536' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Book["timeStamp"])]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "timeStamp" (class pojo.Book), not marked as ignorable (6 known properties: "bookLanguage", "bookDescription", "bookId", "additional", "publicationYear", "bookName"])
 at [Source: (String)"{"timeStamp":"20:34:33.647 16-08-2021","statusCode":404,"error":"Not Found","errorMessage":"Book with 'bookId' = '536' doesn't exist!"}"; line: 1, column: 15] (through reference chain: pojo.Book["timeStamp"])
at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)
at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)
at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1679)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:330)
at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)
at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)
at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)
at com.fasterxml.jackson.databind.ObjectMapper$readValue$0.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonPathJackson2ObjectDeserializer.deserialize(JsonPathJackson2ObjectDeserializer.groovy:46)
at io.restassured.path.json.mapping.JsonPathObjectDeserializer$deserialize.call(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserializeWithJackson2(JsonObjectDeserializer.groovy:109)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer$deserializeWithJackson2.callStatic(Unknown Source)
at io.restassured.internal.path.json.mapping.JsonObjectDeserializer.deserialize(JsonObjectDeserializer.groovy:70)
at io.restassured.path.json.JsonPath.jsonStringToObject(JsonPath.java:1093)
at io.restassured.path.json.JsonPath.getObject(JsonPath.java:560)
at service.BookService.getActualObjBook(BookService.java:72)
at BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(BookTest.java:78)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotFoundBookByIdGetRequestNegativeCase -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyGetNotFoundBookByIdGetRequestNegativeCase(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifySearchBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifySearchBooksGetRequest()[pri:0, instance:BookTest@3f4cd155]" name="verifySearchBooksGetRequest" duration-ms="18" started-at="2021-08-16T20:34:33 EEST" description="Verifying searching books by its name" finished-at="2021-08-16T20:34:33 EEST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Actual StatusCode not matching to Expected one. expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Actual StatusCode not matching to Expected one. expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at utils.Validator.validateStatusCode(Validator.java:18)
at BookTest.verifySearchBooksGetRequest(BookTest.java:112)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchBooksGetRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifySearchBooksGetRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatedBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyUpdatedBookPutRequest(pojo.Book)[pri:0, instance:BookTest@3f4cd155]" name="verifyUpdatedBookPutRequest" duration-ms="205" started-at="2021-08-16T20:34:33 EEST" description="Verifying updating Book object with PUT method" data-provider="dpNewBook" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{"bookId":536, "bookName":"Sed sunt et quas", "bookLanguage":"spanish", "bookDescription":"updated book description", "publicationYear":1974, "additional":{"pageCount":573, "size":{"height":14.9, "width":0.0, "lenght":0.0}}}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdatedBookPutRequest -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:BookTest@3f4cd155]" name="afterMethod" is-config="true" duration-ms="1" started-at="2021-08-16T20:34:33 EEST" finished-at="2021-08-16T20:34:33 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void BookTest.verifyUpdatedBookPutRequest(pojo.Book)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- BookTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
